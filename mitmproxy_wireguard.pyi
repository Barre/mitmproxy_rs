from collections.abc import Awaitable, Callable
from typing import Optional

class WireguardServer:
    def getsockname(self) -> tuple[str, int]: ...
    def send_datagram(self, data: bytes, src_addr: tuple[str, int], dst_addr: tuple[str, int]) -> None: ...
    def stop(self) -> None: ...
    def wait(self) -> Awaitable[None]: ...

class TcpStream:
    def read(self, n: int) -> Awaitable[bytes]: ...
    def write(self, data: bytes): ...
    def drain(self) -> Awaitable[None]: ...
    def write_eof(self): ...
    def close(self): ...
    def get_extra_info(self, name: str) -> tuple[str, int]: ...
    def __repr__(self) -> str: ...

async def start_server(
    host: str,
    port: int,
    private_key: str,
    peer_public_keys: list[tuple[str, Optional[bytes]]],
    handle_connection: Callable[[TcpStream], Awaitable[None]],
    receive_datagram: Callable[[bytes, tuple[str, int], tuple[str, int]], None],
) -> WireguardServer: ...
def genkey() -> str: ...
def pubkey(private_key: str) -> str: ...
